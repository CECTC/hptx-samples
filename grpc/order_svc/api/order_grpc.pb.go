// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.11.4
// source: order.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SoServiceClient is the client API for SoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoServiceClient interface {
	CreateSo(ctx context.Context, in *CreateSoReq, opts ...grpc.CallOption) (*CreateSoResponse, error)
}

type soServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSoServiceClient(cc grpc.ClientConnInterface) SoServiceClient {
	return &soServiceClient{cc}
}

func (c *soServiceClient) CreateSo(ctx context.Context, in *CreateSoReq, opts ...grpc.CallOption) (*CreateSoResponse, error) {
	out := new(CreateSoResponse)
	err := c.cc.Invoke(ctx, "/api.SoService/CreateSo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoServiceServer is the server API for SoService service.
// All implementations should embed UnimplementedSoServiceServer
// for forward compatibility
type SoServiceServer interface {
	CreateSo(context.Context, *CreateSoReq) (*CreateSoResponse, error)
}

// UnimplementedSoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSoServiceServer struct {
}

func (UnimplementedSoServiceServer) CreateSo(context.Context, *CreateSoReq) (*CreateSoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSo not implemented")
}

// UnsafeSoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoServiceServer will
// result in compilation errors.
type UnsafeSoServiceServer interface {
	mustEmbedUnimplementedSoServiceServer()
}

func RegisterSoServiceServer(s grpc.ServiceRegistrar, srv SoServiceServer) {
	s.RegisterService(&SoService_ServiceDesc, srv)
}

func _SoService_CreateSo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoServiceServer).CreateSo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SoService/CreateSo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoServiceServer).CreateSo(ctx, req.(*CreateSoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SoService_ServiceDesc is the grpc.ServiceDesc for SoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.SoService",
	HandlerType: (*SoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSo",
			Handler:    _SoService_CreateSo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
